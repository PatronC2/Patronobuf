// source: agents.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.patronobuf.CommandRequest', null, global);
goog.exportSymbol('proto.patronobuf.CommandResponse', null, global);
goog.exportSymbol('proto.patronobuf.CommandStatusRequest', null, global);
goog.exportSymbol('proto.patronobuf.CommandStatusResponse', null, global);
goog.exportSymbol('proto.patronobuf.ConfigurationRequest', null, global);
goog.exportSymbol('proto.patronobuf.ConfigurationResponse', null, global);
goog.exportSymbol('proto.patronobuf.FileRequest', null, global);
goog.exportSymbol('proto.patronobuf.FileResponse', null, global);
goog.exportSymbol('proto.patronobuf.FileToServer', null, global);
goog.exportSymbol('proto.patronobuf.FileTransferStatusResponse', null, global);
goog.exportSymbol('proto.patronobuf.KeysRequest', null, global);
goog.exportSymbol('proto.patronobuf.KeysResponse', null, global);
goog.exportSymbol('proto.patronobuf.Request', null, global);
goog.exportSymbol('proto.patronobuf.Request.PayloadCase', null, global);
goog.exportSymbol('proto.patronobuf.RequestType', null, global);
goog.exportSymbol('proto.patronobuf.Response', null, global);
goog.exportSymbol('proto.patronobuf.Response.PayloadCase', null, global);
goog.exportSymbol('proto.patronobuf.ResponseType', null, global);
goog.exportSymbol('proto.patronobuf.Tag', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.patronobuf.Request.oneofGroups_);
};
goog.inherits(proto.patronobuf.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.Request.displayName = 'proto.patronobuf.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.patronobuf.Response.oneofGroups_);
};
goog.inherits(proto.patronobuf.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.Response.displayName = 'proto.patronobuf.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.ConfigurationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.patronobuf.ConfigurationRequest.repeatedFields_, null);
};
goog.inherits(proto.patronobuf.ConfigurationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.ConfigurationRequest.displayName = 'proto.patronobuf.ConfigurationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.ConfigurationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.patronobuf.ConfigurationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.ConfigurationResponse.displayName = 'proto.patronobuf.ConfigurationResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.CommandRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.patronobuf.CommandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.CommandRequest.displayName = 'proto.patronobuf.CommandRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.CommandResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.patronobuf.CommandResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.CommandResponse.displayName = 'proto.patronobuf.CommandResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.CommandStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.patronobuf.CommandStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.CommandStatusRequest.displayName = 'proto.patronobuf.CommandStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.CommandStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.patronobuf.CommandStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.CommandStatusResponse.displayName = 'proto.patronobuf.CommandStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.KeysRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.patronobuf.KeysRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.KeysRequest.displayName = 'proto.patronobuf.KeysRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.KeysResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.patronobuf.KeysResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.KeysResponse.displayName = 'proto.patronobuf.KeysResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.FileRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.patronobuf.FileRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.FileRequest.displayName = 'proto.patronobuf.FileRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.FileResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.patronobuf.FileResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.FileResponse.displayName = 'proto.patronobuf.FileResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.FileToServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.patronobuf.FileToServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.FileToServer.displayName = 'proto.patronobuf.FileToServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.FileTransferStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.patronobuf.FileTransferStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.FileTransferStatusResponse.displayName = 'proto.patronobuf.FileTransferStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.patronobuf.Tag = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.patronobuf.Tag, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.patronobuf.Tag.displayName = 'proto.patronobuf.Tag';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.patronobuf.Request.oneofGroups_ = [[2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.patronobuf.Request.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CONFIGURATION: 2,
  COMMAND: 3,
  COMMAND_STATUS: 4,
  KEYS: 5,
  FILE: 6,
  FILE_TO_SERVER: 7
};

/**
 * @return {proto.patronobuf.Request.PayloadCase}
 */
proto.patronobuf.Request.prototype.getPayloadCase = function() {
  return /** @type {proto.patronobuf.Request.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.patronobuf.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    configuration: (f = msg.getConfiguration()) && proto.patronobuf.ConfigurationRequest.toObject(includeInstance, f),
    command: (f = msg.getCommand()) && proto.patronobuf.CommandRequest.toObject(includeInstance, f),
    commandStatus: (f = msg.getCommandStatus()) && proto.patronobuf.CommandStatusRequest.toObject(includeInstance, f),
    keys: (f = msg.getKeys()) && proto.patronobuf.KeysRequest.toObject(includeInstance, f),
    file: (f = msg.getFile()) && proto.patronobuf.FileRequest.toObject(includeInstance, f),
    fileToServer: (f = msg.getFileToServer()) && proto.patronobuf.FileToServer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.Request}
 */
proto.patronobuf.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.Request;
  return proto.patronobuf.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.Request}
 */
proto.patronobuf.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.patronobuf.RequestType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.patronobuf.ConfigurationRequest;
      reader.readMessage(value,proto.patronobuf.ConfigurationRequest.deserializeBinaryFromReader);
      msg.setConfiguration(value);
      break;
    case 3:
      var value = new proto.patronobuf.CommandRequest;
      reader.readMessage(value,proto.patronobuf.CommandRequest.deserializeBinaryFromReader);
      msg.setCommand(value);
      break;
    case 4:
      var value = new proto.patronobuf.CommandStatusRequest;
      reader.readMessage(value,proto.patronobuf.CommandStatusRequest.deserializeBinaryFromReader);
      msg.setCommandStatus(value);
      break;
    case 5:
      var value = new proto.patronobuf.KeysRequest;
      reader.readMessage(value,proto.patronobuf.KeysRequest.deserializeBinaryFromReader);
      msg.setKeys(value);
      break;
    case 6:
      var value = new proto.patronobuf.FileRequest;
      reader.readMessage(value,proto.patronobuf.FileRequest.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    case 7:
      var value = new proto.patronobuf.FileToServer;
      reader.readMessage(value,proto.patronobuf.FileToServer.deserializeBinaryFromReader);
      msg.setFileToServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConfiguration();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.patronobuf.ConfigurationRequest.serializeBinaryToWriter
    );
  }
  f = message.getCommand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.patronobuf.CommandRequest.serializeBinaryToWriter
    );
  }
  f = message.getCommandStatus();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.patronobuf.CommandStatusRequest.serializeBinaryToWriter
    );
  }
  f = message.getKeys();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.patronobuf.KeysRequest.serializeBinaryToWriter
    );
  }
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.patronobuf.FileRequest.serializeBinaryToWriter
    );
  }
  f = message.getFileToServer();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.patronobuf.FileToServer.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestType type = 1;
 * @return {!proto.patronobuf.RequestType}
 */
proto.patronobuf.Request.prototype.getType = function() {
  return /** @type {!proto.patronobuf.RequestType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.patronobuf.RequestType} value
 * @return {!proto.patronobuf.Request} returns this
 */
proto.patronobuf.Request.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ConfigurationRequest configuration = 2;
 * @return {?proto.patronobuf.ConfigurationRequest}
 */
proto.patronobuf.Request.prototype.getConfiguration = function() {
  return /** @type{?proto.patronobuf.ConfigurationRequest} */ (
    jspb.Message.getWrapperField(this, proto.patronobuf.ConfigurationRequest, 2));
};


/**
 * @param {?proto.patronobuf.ConfigurationRequest|undefined} value
 * @return {!proto.patronobuf.Request} returns this
*/
proto.patronobuf.Request.prototype.setConfiguration = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.patronobuf.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.patronobuf.Request} returns this
 */
proto.patronobuf.Request.prototype.clearConfiguration = function() {
  return this.setConfiguration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.patronobuf.Request.prototype.hasConfiguration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CommandRequest command = 3;
 * @return {?proto.patronobuf.CommandRequest}
 */
proto.patronobuf.Request.prototype.getCommand = function() {
  return /** @type{?proto.patronobuf.CommandRequest} */ (
    jspb.Message.getWrapperField(this, proto.patronobuf.CommandRequest, 3));
};


/**
 * @param {?proto.patronobuf.CommandRequest|undefined} value
 * @return {!proto.patronobuf.Request} returns this
*/
proto.patronobuf.Request.prototype.setCommand = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.patronobuf.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.patronobuf.Request} returns this
 */
proto.patronobuf.Request.prototype.clearCommand = function() {
  return this.setCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.patronobuf.Request.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CommandStatusRequest command_status = 4;
 * @return {?proto.patronobuf.CommandStatusRequest}
 */
proto.patronobuf.Request.prototype.getCommandStatus = function() {
  return /** @type{?proto.patronobuf.CommandStatusRequest} */ (
    jspb.Message.getWrapperField(this, proto.patronobuf.CommandStatusRequest, 4));
};


/**
 * @param {?proto.patronobuf.CommandStatusRequest|undefined} value
 * @return {!proto.patronobuf.Request} returns this
*/
proto.patronobuf.Request.prototype.setCommandStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.patronobuf.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.patronobuf.Request} returns this
 */
proto.patronobuf.Request.prototype.clearCommandStatus = function() {
  return this.setCommandStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.patronobuf.Request.prototype.hasCommandStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional KeysRequest keys = 5;
 * @return {?proto.patronobuf.KeysRequest}
 */
proto.patronobuf.Request.prototype.getKeys = function() {
  return /** @type{?proto.patronobuf.KeysRequest} */ (
    jspb.Message.getWrapperField(this, proto.patronobuf.KeysRequest, 5));
};


/**
 * @param {?proto.patronobuf.KeysRequest|undefined} value
 * @return {!proto.patronobuf.Request} returns this
*/
proto.patronobuf.Request.prototype.setKeys = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.patronobuf.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.patronobuf.Request} returns this
 */
proto.patronobuf.Request.prototype.clearKeys = function() {
  return this.setKeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.patronobuf.Request.prototype.hasKeys = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FileRequest file = 6;
 * @return {?proto.patronobuf.FileRequest}
 */
proto.patronobuf.Request.prototype.getFile = function() {
  return /** @type{?proto.patronobuf.FileRequest} */ (
    jspb.Message.getWrapperField(this, proto.patronobuf.FileRequest, 6));
};


/**
 * @param {?proto.patronobuf.FileRequest|undefined} value
 * @return {!proto.patronobuf.Request} returns this
*/
proto.patronobuf.Request.prototype.setFile = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.patronobuf.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.patronobuf.Request} returns this
 */
proto.patronobuf.Request.prototype.clearFile = function() {
  return this.setFile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.patronobuf.Request.prototype.hasFile = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional FileToServer file_to_server = 7;
 * @return {?proto.patronobuf.FileToServer}
 */
proto.patronobuf.Request.prototype.getFileToServer = function() {
  return /** @type{?proto.patronobuf.FileToServer} */ (
    jspb.Message.getWrapperField(this, proto.patronobuf.FileToServer, 7));
};


/**
 * @param {?proto.patronobuf.FileToServer|undefined} value
 * @return {!proto.patronobuf.Request} returns this
*/
proto.patronobuf.Request.prototype.setFileToServer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.patronobuf.Request.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.patronobuf.Request} returns this
 */
proto.patronobuf.Request.prototype.clearFileToServer = function() {
  return this.setFileToServer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.patronobuf.Request.prototype.hasFileToServer = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.patronobuf.Response.oneofGroups_ = [[2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.patronobuf.Response.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CONFIGURATION_RESPONSE: 2,
  COMMAND_RESPONSE: 3,
  COMMAND_STATUS_RESPONSE: 4,
  KEYS_RESPONSE: 5,
  FILE_RESPONSE: 6,
  FILE_TRANSFER_STATUS_RESPONSE: 7
};

/**
 * @return {proto.patronobuf.Response.PayloadCase}
 */
proto.patronobuf.Response.prototype.getPayloadCase = function() {
  return /** @type {proto.patronobuf.Response.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.patronobuf.Response.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    configurationResponse: (f = msg.getConfigurationResponse()) && proto.patronobuf.ConfigurationResponse.toObject(includeInstance, f),
    commandResponse: (f = msg.getCommandResponse()) && proto.patronobuf.CommandResponse.toObject(includeInstance, f),
    commandStatusResponse: (f = msg.getCommandStatusResponse()) && proto.patronobuf.CommandStatusResponse.toObject(includeInstance, f),
    keysResponse: (f = msg.getKeysResponse()) && proto.patronobuf.KeysResponse.toObject(includeInstance, f),
    fileResponse: (f = msg.getFileResponse()) && proto.patronobuf.FileResponse.toObject(includeInstance, f),
    fileTransferStatusResponse: (f = msg.getFileTransferStatusResponse()) && proto.patronobuf.FileTransferStatusResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.Response}
 */
proto.patronobuf.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.Response;
  return proto.patronobuf.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.Response}
 */
proto.patronobuf.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.patronobuf.ResponseType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.patronobuf.ConfigurationResponse;
      reader.readMessage(value,proto.patronobuf.ConfigurationResponse.deserializeBinaryFromReader);
      msg.setConfigurationResponse(value);
      break;
    case 3:
      var value = new proto.patronobuf.CommandResponse;
      reader.readMessage(value,proto.patronobuf.CommandResponse.deserializeBinaryFromReader);
      msg.setCommandResponse(value);
      break;
    case 4:
      var value = new proto.patronobuf.CommandStatusResponse;
      reader.readMessage(value,proto.patronobuf.CommandStatusResponse.deserializeBinaryFromReader);
      msg.setCommandStatusResponse(value);
      break;
    case 5:
      var value = new proto.patronobuf.KeysResponse;
      reader.readMessage(value,proto.patronobuf.KeysResponse.deserializeBinaryFromReader);
      msg.setKeysResponse(value);
      break;
    case 6:
      var value = new proto.patronobuf.FileResponse;
      reader.readMessage(value,proto.patronobuf.FileResponse.deserializeBinaryFromReader);
      msg.setFileResponse(value);
      break;
    case 7:
      var value = new proto.patronobuf.FileTransferStatusResponse;
      reader.readMessage(value,proto.patronobuf.FileTransferStatusResponse.deserializeBinaryFromReader);
      msg.setFileTransferStatusResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getConfigurationResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.patronobuf.ConfigurationResponse.serializeBinaryToWriter
    );
  }
  f = message.getCommandResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.patronobuf.CommandResponse.serializeBinaryToWriter
    );
  }
  f = message.getCommandStatusResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.patronobuf.CommandStatusResponse.serializeBinaryToWriter
    );
  }
  f = message.getKeysResponse();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.patronobuf.KeysResponse.serializeBinaryToWriter
    );
  }
  f = message.getFileResponse();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.patronobuf.FileResponse.serializeBinaryToWriter
    );
  }
  f = message.getFileTransferStatusResponse();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.patronobuf.FileTransferStatusResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseType type = 1;
 * @return {!proto.patronobuf.ResponseType}
 */
proto.patronobuf.Response.prototype.getType = function() {
  return /** @type {!proto.patronobuf.ResponseType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.patronobuf.ResponseType} value
 * @return {!proto.patronobuf.Response} returns this
 */
proto.patronobuf.Response.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ConfigurationResponse configuration_response = 2;
 * @return {?proto.patronobuf.ConfigurationResponse}
 */
proto.patronobuf.Response.prototype.getConfigurationResponse = function() {
  return /** @type{?proto.patronobuf.ConfigurationResponse} */ (
    jspb.Message.getWrapperField(this, proto.patronobuf.ConfigurationResponse, 2));
};


/**
 * @param {?proto.patronobuf.ConfigurationResponse|undefined} value
 * @return {!proto.patronobuf.Response} returns this
*/
proto.patronobuf.Response.prototype.setConfigurationResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.patronobuf.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.patronobuf.Response} returns this
 */
proto.patronobuf.Response.prototype.clearConfigurationResponse = function() {
  return this.setConfigurationResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.patronobuf.Response.prototype.hasConfigurationResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CommandResponse command_response = 3;
 * @return {?proto.patronobuf.CommandResponse}
 */
proto.patronobuf.Response.prototype.getCommandResponse = function() {
  return /** @type{?proto.patronobuf.CommandResponse} */ (
    jspb.Message.getWrapperField(this, proto.patronobuf.CommandResponse, 3));
};


/**
 * @param {?proto.patronobuf.CommandResponse|undefined} value
 * @return {!proto.patronobuf.Response} returns this
*/
proto.patronobuf.Response.prototype.setCommandResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.patronobuf.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.patronobuf.Response} returns this
 */
proto.patronobuf.Response.prototype.clearCommandResponse = function() {
  return this.setCommandResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.patronobuf.Response.prototype.hasCommandResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional CommandStatusResponse command_status_response = 4;
 * @return {?proto.patronobuf.CommandStatusResponse}
 */
proto.patronobuf.Response.prototype.getCommandStatusResponse = function() {
  return /** @type{?proto.patronobuf.CommandStatusResponse} */ (
    jspb.Message.getWrapperField(this, proto.patronobuf.CommandStatusResponse, 4));
};


/**
 * @param {?proto.patronobuf.CommandStatusResponse|undefined} value
 * @return {!proto.patronobuf.Response} returns this
*/
proto.patronobuf.Response.prototype.setCommandStatusResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.patronobuf.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.patronobuf.Response} returns this
 */
proto.patronobuf.Response.prototype.clearCommandStatusResponse = function() {
  return this.setCommandStatusResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.patronobuf.Response.prototype.hasCommandStatusResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional KeysResponse keys_response = 5;
 * @return {?proto.patronobuf.KeysResponse}
 */
proto.patronobuf.Response.prototype.getKeysResponse = function() {
  return /** @type{?proto.patronobuf.KeysResponse} */ (
    jspb.Message.getWrapperField(this, proto.patronobuf.KeysResponse, 5));
};


/**
 * @param {?proto.patronobuf.KeysResponse|undefined} value
 * @return {!proto.patronobuf.Response} returns this
*/
proto.patronobuf.Response.prototype.setKeysResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.patronobuf.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.patronobuf.Response} returns this
 */
proto.patronobuf.Response.prototype.clearKeysResponse = function() {
  return this.setKeysResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.patronobuf.Response.prototype.hasKeysResponse = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional FileResponse file_response = 6;
 * @return {?proto.patronobuf.FileResponse}
 */
proto.patronobuf.Response.prototype.getFileResponse = function() {
  return /** @type{?proto.patronobuf.FileResponse} */ (
    jspb.Message.getWrapperField(this, proto.patronobuf.FileResponse, 6));
};


/**
 * @param {?proto.patronobuf.FileResponse|undefined} value
 * @return {!proto.patronobuf.Response} returns this
*/
proto.patronobuf.Response.prototype.setFileResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.patronobuf.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.patronobuf.Response} returns this
 */
proto.patronobuf.Response.prototype.clearFileResponse = function() {
  return this.setFileResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.patronobuf.Response.prototype.hasFileResponse = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional FileTransferStatusResponse file_transfer_status_response = 7;
 * @return {?proto.patronobuf.FileTransferStatusResponse}
 */
proto.patronobuf.Response.prototype.getFileTransferStatusResponse = function() {
  return /** @type{?proto.patronobuf.FileTransferStatusResponse} */ (
    jspb.Message.getWrapperField(this, proto.patronobuf.FileTransferStatusResponse, 7));
};


/**
 * @param {?proto.patronobuf.FileTransferStatusResponse|undefined} value
 * @return {!proto.patronobuf.Response} returns this
*/
proto.patronobuf.Response.prototype.setFileTransferStatusResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.patronobuf.Response.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.patronobuf.Response} returns this
 */
proto.patronobuf.Response.prototype.clearFileTransferStatusResponse = function() {
  return this.setFileTransferStatusResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.patronobuf.Response.prototype.hasFileTransferStatusResponse = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.patronobuf.ConfigurationRequest.repeatedFields_ = [16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.ConfigurationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.ConfigurationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.ConfigurationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.ConfigurationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hostname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ostype: jspb.Message.getFieldWithDefault(msg, 4, ""),
    arch: jspb.Message.getFieldWithDefault(msg, 5, ""),
    osbuild: jspb.Message.getFieldWithDefault(msg, 6, ""),
    cpus: jspb.Message.getFieldWithDefault(msg, 7, ""),
    memory: jspb.Message.getFieldWithDefault(msg, 8, ""),
    agentip: jspb.Message.getFieldWithDefault(msg, 9, ""),
    serverip: jspb.Message.getFieldWithDefault(msg, 10, ""),
    serverport: jspb.Message.getFieldWithDefault(msg, 11, ""),
    callbackfrequency: jspb.Message.getFieldWithDefault(msg, 12, ""),
    callbackjitter: jspb.Message.getFieldWithDefault(msg, 13, ""),
    masterkey: jspb.Message.getFieldWithDefault(msg, 14, ""),
    status: jspb.Message.getFieldWithDefault(msg, 15, ""),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    proto.patronobuf.Tag.toObject, includeInstance),
    nextcallbackUnix: jspb.Message.getFieldWithDefault(msg, 17, 0),
    transportprotocol: jspb.Message.getFieldWithDefault(msg, 18, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.ConfigurationRequest}
 */
proto.patronobuf.ConfigurationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.ConfigurationRequest;
  return proto.patronobuf.ConfigurationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.ConfigurationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.ConfigurationRequest}
 */
proto.patronobuf.ConfigurationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOstype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setArch(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsbuild(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCpus(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemory(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentip(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerip(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerport(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackfrequency(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackjitter(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setMasterkey(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 16:
      var value = new proto.patronobuf.Tag;
      reader.readMessage(value,proto.patronobuf.Tag.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextcallbackUnix(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransportprotocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.ConfigurationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.ConfigurationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.ConfigurationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.ConfigurationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOstype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getArch();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOsbuild();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCpus();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMemory();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAgentip();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getServerip();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getServerport();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getCallbackfrequency();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCallbackjitter();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getMasterkey();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.patronobuf.Tag.serializeBinaryToWriter
    );
  }
  f = message.getNextcallbackUnix();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getTransportprotocol();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string hostname = 3;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setHostname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ostype = 4;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getOstype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setOstype = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string arch = 5;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getArch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setArch = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string osbuild = 6;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getOsbuild = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setOsbuild = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string cpus = 7;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getCpus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setCpus = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string memory = 8;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getMemory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setMemory = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string agentip = 9;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getAgentip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setAgentip = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string serverip = 10;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getServerip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setServerip = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string serverport = 11;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getServerport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setServerport = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string callbackfrequency = 12;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getCallbackfrequency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setCallbackfrequency = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string callbackjitter = 13;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getCallbackjitter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setCallbackjitter = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string masterkey = 14;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getMasterkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setMasterkey = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string status = 15;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * repeated Tag tags = 16;
 * @return {!Array<!proto.patronobuf.Tag>}
 */
proto.patronobuf.ConfigurationRequest.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.patronobuf.Tag>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.patronobuf.Tag, 16));
};


/**
 * @param {!Array<!proto.patronobuf.Tag>} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
*/
proto.patronobuf.ConfigurationRequest.prototype.setTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.patronobuf.Tag=} opt_value
 * @param {number=} opt_index
 * @return {!proto.patronobuf.Tag}
 */
proto.patronobuf.ConfigurationRequest.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.patronobuf.Tag, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional int64 nextcallback_unix = 17;
 * @return {number}
 */
proto.patronobuf.ConfigurationRequest.prototype.getNextcallbackUnix = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setNextcallbackUnix = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional string transportprotocol = 18;
 * @return {string}
 */
proto.patronobuf.ConfigurationRequest.prototype.getTransportprotocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationRequest} returns this
 */
proto.patronobuf.ConfigurationRequest.prototype.setTransportprotocol = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.ConfigurationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.ConfigurationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.ConfigurationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.ConfigurationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serverip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    serverport: jspb.Message.getFieldWithDefault(msg, 3, ""),
    callbackfrequency: jspb.Message.getFieldWithDefault(msg, 4, ""),
    callbackjitter: jspb.Message.getFieldWithDefault(msg, 5, ""),
    transportprotocol: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.ConfigurationResponse}
 */
proto.patronobuf.ConfigurationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.ConfigurationResponse;
  return proto.patronobuf.ConfigurationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.ConfigurationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.ConfigurationResponse}
 */
proto.patronobuf.ConfigurationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerip(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerport(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackfrequency(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackjitter(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransportprotocol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.ConfigurationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.ConfigurationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.ConfigurationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.ConfigurationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServerip();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServerport();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCallbackfrequency();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCallbackjitter();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTransportprotocol();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.patronobuf.ConfigurationResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationResponse} returns this
 */
proto.patronobuf.ConfigurationResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string serverip = 2;
 * @return {string}
 */
proto.patronobuf.ConfigurationResponse.prototype.getServerip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationResponse} returns this
 */
proto.patronobuf.ConfigurationResponse.prototype.setServerip = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string serverport = 3;
 * @return {string}
 */
proto.patronobuf.ConfigurationResponse.prototype.getServerport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationResponse} returns this
 */
proto.patronobuf.ConfigurationResponse.prototype.setServerport = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string callbackfrequency = 4;
 * @return {string}
 */
proto.patronobuf.ConfigurationResponse.prototype.getCallbackfrequency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationResponse} returns this
 */
proto.patronobuf.ConfigurationResponse.prototype.setCallbackfrequency = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string callbackjitter = 5;
 * @return {string}
 */
proto.patronobuf.ConfigurationResponse.prototype.getCallbackjitter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationResponse} returns this
 */
proto.patronobuf.ConfigurationResponse.prototype.setCallbackjitter = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string transportprotocol = 6;
 * @return {string}
 */
proto.patronobuf.ConfigurationResponse.prototype.getTransportprotocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.ConfigurationResponse} returns this
 */
proto.patronobuf.ConfigurationResponse.prototype.setTransportprotocol = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.CommandRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.CommandRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.CommandRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.CommandRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.CommandRequest}
 */
proto.patronobuf.CommandRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.CommandRequest;
  return proto.patronobuf.CommandRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.CommandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.CommandRequest}
 */
proto.patronobuf.CommandRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.CommandRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.CommandRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.CommandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.CommandRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.patronobuf.CommandRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.CommandRequest} returns this
 */
proto.patronobuf.CommandRequest.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.CommandResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.CommandResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.CommandResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.CommandResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commandtype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    commandid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    command: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.CommandResponse}
 */
proto.patronobuf.CommandResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.CommandResponse;
  return proto.patronobuf.CommandResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.CommandResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.CommandResponse}
 */
proto.patronobuf.CommandResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommandtype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommandid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.CommandResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.CommandResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.CommandResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.CommandResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommandtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCommandid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCommand();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.patronobuf.CommandResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.CommandResponse} returns this
 */
proto.patronobuf.CommandResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string commandtype = 2;
 * @return {string}
 */
proto.patronobuf.CommandResponse.prototype.getCommandtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.CommandResponse} returns this
 */
proto.patronobuf.CommandResponse.prototype.setCommandtype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string commandid = 3;
 * @return {string}
 */
proto.patronobuf.CommandResponse.prototype.getCommandid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.CommandResponse} returns this
 */
proto.patronobuf.CommandResponse.prototype.setCommandid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string command = 4;
 * @return {string}
 */
proto.patronobuf.CommandResponse.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.CommandResponse} returns this
 */
proto.patronobuf.CommandResponse.prototype.setCommand = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.CommandStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.CommandStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.CommandStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.CommandStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commandid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    result: jspb.Message.getFieldWithDefault(msg, 3, ""),
    output: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.CommandStatusRequest}
 */
proto.patronobuf.CommandStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.CommandStatusRequest;
  return proto.patronobuf.CommandStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.CommandStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.CommandStatusRequest}
 */
proto.patronobuf.CommandStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommandid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResult(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.CommandStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.CommandStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.CommandStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.CommandStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommandid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOutput();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.patronobuf.CommandStatusRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.CommandStatusRequest} returns this
 */
proto.patronobuf.CommandStatusRequest.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string commandid = 2;
 * @return {string}
 */
proto.patronobuf.CommandStatusRequest.prototype.getCommandid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.CommandStatusRequest} returns this
 */
proto.patronobuf.CommandStatusRequest.prototype.setCommandid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string result = 3;
 * @return {string}
 */
proto.patronobuf.CommandStatusRequest.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.CommandStatusRequest} returns this
 */
proto.patronobuf.CommandStatusRequest.prototype.setResult = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string output = 4;
 * @return {string}
 */
proto.patronobuf.CommandStatusRequest.prototype.getOutput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.CommandStatusRequest} returns this
 */
proto.patronobuf.CommandStatusRequest.prototype.setOutput = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.CommandStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.CommandStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.CommandStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.CommandStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.CommandStatusResponse}
 */
proto.patronobuf.CommandStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.CommandStatusResponse;
  return proto.patronobuf.CommandStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.CommandStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.CommandStatusResponse}
 */
proto.patronobuf.CommandStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.CommandStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.CommandStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.CommandStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.CommandStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.patronobuf.CommandStatusResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.CommandStatusResponse} returns this
 */
proto.patronobuf.CommandStatusResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.KeysRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.KeysRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.KeysRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.KeysRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keys: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.KeysRequest}
 */
proto.patronobuf.KeysRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.KeysRequest;
  return proto.patronobuf.KeysRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.KeysRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.KeysRequest}
 */
proto.patronobuf.KeysRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.KeysRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.KeysRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.KeysRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.KeysRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeys();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.patronobuf.KeysRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.KeysRequest} returns this
 */
proto.patronobuf.KeysRequest.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string keys = 2;
 * @return {string}
 */
proto.patronobuf.KeysRequest.prototype.getKeys = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.KeysRequest} returns this
 */
proto.patronobuf.KeysRequest.prototype.setKeys = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.KeysResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.KeysResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.KeysResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.KeysResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.KeysResponse}
 */
proto.patronobuf.KeysResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.KeysResponse;
  return proto.patronobuf.KeysResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.KeysResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.KeysResponse}
 */
proto.patronobuf.KeysResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.KeysResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.KeysResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.KeysResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.KeysResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.patronobuf.KeysResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.KeysResponse} returns this
 */
proto.patronobuf.KeysResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.FileRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.FileRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.FileRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.FileRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.FileRequest}
 */
proto.patronobuf.FileRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.FileRequest;
  return proto.patronobuf.FileRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.FileRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.FileRequest}
 */
proto.patronobuf.FileRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.FileRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.FileRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.FileRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.FileRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string uuid = 1;
 * @return {string}
 */
proto.patronobuf.FileRequest.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.FileRequest} returns this
 */
proto.patronobuf.FileRequest.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.FileResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.FileResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.FileResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.FileResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transfertype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    filepath: jspb.Message.getFieldWithDefault(msg, 4, ""),
    chunk: msg.getChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.FileResponse}
 */
proto.patronobuf.FileResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.FileResponse;
  return proto.patronobuf.FileResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.FileResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.FileResponse}
 */
proto.patronobuf.FileResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransfertype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilepath(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.FileResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.FileResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.FileResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.FileResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransfertype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFilepath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional string fileid = 1;
 * @return {string}
 */
proto.patronobuf.FileResponse.prototype.getFileid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.FileResponse} returns this
 */
proto.patronobuf.FileResponse.prototype.setFileid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.patronobuf.FileResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.FileResponse} returns this
 */
proto.patronobuf.FileResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transfertype = 3;
 * @return {string}
 */
proto.patronobuf.FileResponse.prototype.getTransfertype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.FileResponse} returns this
 */
proto.patronobuf.FileResponse.prototype.setTransfertype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string filepath = 4;
 * @return {string}
 */
proto.patronobuf.FileResponse.prototype.getFilepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.FileResponse} returns this
 */
proto.patronobuf.FileResponse.prototype.setFilepath = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes chunk = 5;
 * @return {!(string|Uint8Array)}
 */
proto.patronobuf.FileResponse.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes chunk = 5;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.patronobuf.FileResponse.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.patronobuf.FileResponse.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.patronobuf.FileResponse} returns this
 */
proto.patronobuf.FileResponse.prototype.setChunk = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.FileToServer.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.FileToServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.FileToServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.FileToServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transfertype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    path: jspb.Message.getFieldWithDefault(msg, 4, ""),
    status: jspb.Message.getFieldWithDefault(msg, 5, ""),
    chunk: msg.getChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.FileToServer}
 */
proto.patronobuf.FileToServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.FileToServer;
  return proto.patronobuf.FileToServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.FileToServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.FileToServer}
 */
proto.patronobuf.FileToServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransfertype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.FileToServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.FileToServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.FileToServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.FileToServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransfertype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional string fileid = 1;
 * @return {string}
 */
proto.patronobuf.FileToServer.prototype.getFileid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.FileToServer} returns this
 */
proto.patronobuf.FileToServer.prototype.setFileid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.patronobuf.FileToServer.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.FileToServer} returns this
 */
proto.patronobuf.FileToServer.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transfertype = 3;
 * @return {string}
 */
proto.patronobuf.FileToServer.prototype.getTransfertype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.FileToServer} returns this
 */
proto.patronobuf.FileToServer.prototype.setTransfertype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string path = 4;
 * @return {string}
 */
proto.patronobuf.FileToServer.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.FileToServer} returns this
 */
proto.patronobuf.FileToServer.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string status = 5;
 * @return {string}
 */
proto.patronobuf.FileToServer.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.FileToServer} returns this
 */
proto.patronobuf.FileToServer.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes chunk = 6;
 * @return {!(string|Uint8Array)}
 */
proto.patronobuf.FileToServer.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes chunk = 6;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.patronobuf.FileToServer.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.patronobuf.FileToServer.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.patronobuf.FileToServer} returns this
 */
proto.patronobuf.FileToServer.prototype.setChunk = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.FileTransferStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.FileTransferStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.FileTransferStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.FileTransferStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.FileTransferStatusResponse}
 */
proto.patronobuf.FileTransferStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.FileTransferStatusResponse;
  return proto.patronobuf.FileTransferStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.FileTransferStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.FileTransferStatusResponse}
 */
proto.patronobuf.FileTransferStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.FileTransferStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.FileTransferStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.FileTransferStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.FileTransferStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFileid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string fileid = 1;
 * @return {string}
 */
proto.patronobuf.FileTransferStatusResponse.prototype.getFileid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.FileTransferStatusResponse} returns this
 */
proto.patronobuf.FileTransferStatusResponse.prototype.setFileid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uuid = 2;
 * @return {string}
 */
proto.patronobuf.FileTransferStatusResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.FileTransferStatusResponse} returns this
 */
proto.patronobuf.FileTransferStatusResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.patronobuf.Tag.prototype.toObject = function(opt_includeInstance) {
  return proto.patronobuf.Tag.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.patronobuf.Tag} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.Tag.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.patronobuf.Tag}
 */
proto.patronobuf.Tag.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.patronobuf.Tag;
  return proto.patronobuf.Tag.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.patronobuf.Tag} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.patronobuf.Tag}
 */
proto.patronobuf.Tag.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.patronobuf.Tag.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.patronobuf.Tag.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.patronobuf.Tag} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.patronobuf.Tag.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.patronobuf.Tag.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.Tag} returns this
 */
proto.patronobuf.Tag.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.patronobuf.Tag.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.patronobuf.Tag} returns this
 */
proto.patronobuf.Tag.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.patronobuf.RequestType = {
  CONFIGURATION: 0,
  COMMAND: 1,
  COMMAND_STATUS: 2,
  KEYS: 3,
  FILE: 4,
  FILE_TO_SERVER: 5
};

/**
 * @enum {number}
 */
proto.patronobuf.ResponseType = {
  CONFIGURATION_RESPONSE: 0,
  COMMAND_RESPONSE: 1,
  COMMAND_STATUS_RESPONSE: 2,
  KEYS_RESPONSE: 3,
  FILE_RESPONSE: 4,
  FILE_TRANSFER_STATUS: 5
};

goog.object.extend(exports, proto.patronobuf);
